trigger: none

variables:
  HUBSPOT_PAT:       $(HUBSPOT_PERSONAL_ACCESS_KEY)
  HUBSPOT_PORTAL_ID: "39646145"
  REPO_URL:          "https://$(System.AccessToken)@grahamsio.visualstudio.com/CN%20Website/_git/Hubspot"
  WORKDIR:           "$(Agent.TempDirectory)\repo"

stages:
  - stage: SyncAllThemes
    displayName: Sync All HubSpot Themes
    jobs:
      - job: Sync
        pool:
          vmImage: 'windows-latest'
        steps:
          - checkout: self

          - task: NodeTool@0
            displayName: Install Node.js 20.x
            inputs:
              versionSpec: '20.x'

          - task: PowerShell@2
            displayName: Fetch & Push All Themes (PAT authentication fix)
            inputs:
              targetType: inline
              script: |
                # Read pipeline-provided variables
                $portalId = $env:HUBSPOT_PORTAL_ID
                $pat = $env:HUBSPOT_PAT
                $token = $env:SYSTEM_ACCESSTOKEN
                $repoRoot = $env:BUILD_SOURCESDIRECTORY

                if (-not $portalId) { Write-Error "HUBSPOT_PORTAL_ID missing"; exit 1 }
                if (-not $repoRoot)  { Write-Error "BUILD_SOURCESDIRECTORY missing"; exit 1 }
                if (-not $pat)       { Write-Warning "HUBSPOT_PAT missing or empty; hs will fail" }

                # Install HubSpot CLI
                try {
                  npm install -g @hubspot/cli 2>&1 | Write-Host
                  Write-Host "Installed HubSpot CLI"
                } catch {
                  Write-Warning "npm install -g @hubspot/cli failed: $($_.Exception.Message)"
                }

                # Create valid CLI configuration
                $configDir = Join-Path $env:USERPROFILE ".hscli"
                if (-not (Test-Path $configDir)) { New-Item -ItemType Directory -Path $configDir -Force | Out-Null }
                $configFile = Join-Path $configDir "config.yml"
                
                # Create proper PAT configuration
                @"
defaultAccount: $portalId
accounts:
  - accountId: $portalId
    name: $portalId
    portalId: $portalId
    authType: personalaccesskey
    auth:
      personalAccessKey: $pat
                  "@ | Out-File -FilePath $configFile -Encoding utf8

                  $themes = @('Code Ninja - Marketing Website','DEV','CN TEAM')

                    foreach ($themeName in $themes) {
                    Write-Host "`n=== Processing theme: $themeName ==="

                    # Safe folder + branch names
                    $folderSafe = $themeName -replace '[\/:*?"<>|]', '_' -replace '\s+', '_' -replace '_+', '_'
                    $folderSafe = $folderSafe.Trim('_')
                    $branchName = "theme_$($folderSafe.ToLower())"

                    Write-Host "Branch: $branchName"
                    Write-Host "Folder-safe name: $folderSafe"

                  # Determine destination folder
                  $themesDir = Join-Path $repoRoot 'themes'
                  if (-not (Test-Path $themesDir)) { New-Item -ItemType Directory -Path $themesDir -Force | Out-Null }
                  $dest = Join-Path $themesDir $folderSafe
                  if (-not (Test-Path $dest)) { New-Item -ItemType Directory -Path $dest -Force | Out-Null }

                  Write-Host "Fetching theme into: $dest"

                  # Run hs fetch with explicit authentication
                  try {
                    Write-Host "Running: hs fetch `"$themeName`" `"$dest`" --overwrite --account $portalId"
                    $hsOutput = hs fetch "$themeName" "$dest" --overwrite --account $portalId 2>&1
                    Write-Host $hsOutput
                  } catch {
                    Write-Warning "hs fetch failed: $($_.Exception.Message)"
                    continue
                  }

                  # Verify files were downloaded
                  $files = Get-ChildItem -Path $dest -Recurse -File -ErrorAction SilentlyContinue
                  if (-not $files -or $files.Count -eq 0) {
                    Write-Warning "No files found in $dest after hs fetch"
                    continue
                  }

                  # Git operations
                  Push-Location $repoRoot
                  try {
                    git checkout -B $branchName 2>&1 | Write-Host

                    if ($token -and $token.Trim()) {
                      $authUrl = "https://$token@grahamsio.visualstudio.com/CN%20Website/_git/Hubspot"
                      Write-Host "Setting origin to tokenized URL"
                      git remote set-url origin "$authUrl" 2>&1 | Write-Host
                    }

                    git add "themes/$folderSafe" 2>&1 | Write-Host

                    if (-not (git diff --cached --quiet)) {
                      git config user.name 'AutomatedBuild'
                      git config user.email 'build@yourdomain.com'
                      git commit -m "Sync HubSpot theme '$themeName' â†’ $branchName" 2>&1 | Write-Host
                      git push origin "HEAD:$branchName" 2>&1 | Write-Host
                    } else {
                      Write-Host "No changes detected for '$themeName'"
                    }
                  } catch {
                    Write-Warning "Git operations failed: $($_.Exception.Message)"
                  } finally {
                    Pop-Location
                  }
                }
            env:
              HUBSPOT_PAT:        $(HUBSPOT_PAT)
              HUBSPOT_PORTAL_ID:  $(HUBSPOT_PORTAL_ID)
              System_AccessToken: $(System.AccessToken)