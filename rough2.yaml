trigger: none

variables:
  HUBSPOT_PAT:       $(HUBSPOT_PERSONAL_ACCESS_KEY)
  HUBSPOT_PORTAL_ID: ""
  REPO_URL:          "https://$(System.AccessToken)@grahamsio.visualstudio.com/CN%20Website/_git/Hubspot"
  WORKDIR:           "$(Agent.TempDirectory)\repo"

stages:
  - stage: SyncAllThemes
    displayName: Sync All HubSpot Themes
    jobs:
      - job: Sync
        pool:
          vmImage: 'windows-latest'
        steps:
          - checkout: self

          - task: NodeTool@0
            displayName: Install Node.js 20.x
            inputs:
              versionSpec: '20.x'

          - task: PowerShell@2
            displayName: Fetch & Push All Themes (create YAML using ConvertTo-Yaml)
            inputs:
              targetType: inline
              script: |
                # ---- read pipeline-provided variables ----
                $portalId = $env:HUBSPOT_PORTAL_ID
                $pat      = $env:HUBSPOT_PAT
                $token    = $env:SYSTEM_ACCESSTOKEN
                $repoRoot = $env:BUILD_SOURCESDIRECTORY

                if (-not $portalId) { Write-Error "HUBSPOT_PORTAL_ID missing"; exit 1 }
                if (-not $repoRoot)  { Write-Error "BUILD_SOURCESDIRECTORY missing"; exit 1 }
                if (-not $pat)       { Write-Warning "HUBSPOT_PAT missing or empty; hs will likely fail" }

                # ---- install & import YAML module ----
                try {
                  Install-Module -Name powershell-yaml -Scope CurrentUser -Force -AllowClobber -ErrorAction Stop
                  Import-Module powershell-yaml -ErrorAction Stop
                } catch {
                  Write-Warning ("Could not install/import powershell-yaml: {0}" -f $_.Exception.Message)
                  Write-Warning "ConvertTo-Yaml may not be available; aborting."
                  exit 1
                }

                # ---- compute expiry = now + 30 minutes in UTC ----
                $expiresUtc = (Get-Date).ToUniversalTime().AddMinutes(30).ToString("yyyy-MM-ddTHH:mm:ss.fffZ")

                # ---- build objects for YAML output (legacy format you provided) ----
                $legacyCfg = @{
                  defaultPortal = 'Jeevan'
                  portals = @(
                    @{
                      name = 'Jeevan'
                      portalId = $portalId
                      env = 'prod'
                      authType = 'personalaccesskey'
                      auth = @{
                        tokenInfo = @{
                          accessToken = ''    
                          expiresAt   = $expiresUtc
                        }
                      }
                      accountType = 'STANDARD'
                      personalAccessKey =''
                    }
                  )
                }

                # ---- Remove any other HubSpot config files first (prevents multiple accounts) ----
                try {
                  $maybeHome = $null
                  if ($env:USERPROFILE -and $env:USERPROFILE.Trim()) { $maybeHome = $env:USERPROFILE }
                  elseif ($env:HOME -and $env:HOME.Trim()) { $maybeHome = $env:HOME }

                  $candidates = @()
                  if ($maybeHome) {
                    $candidates += Join-Path $maybeHome 'hubspot.config.yml'
                    $candidates += Join-Path $maybeHome '.hubspotcli\hubspot.config.yml'
                    $candidates += Join-Path $maybeHome '.hscli\config.yml'
                  }
                  if ($repoRoot) {
                    $candidates += Join-Path $repoRoot 'hubspot.config.yml'
                    $candidates += Join-Path $repoRoot '.hubspotcli\hubspot.config.yml'
                    $candidates += Join-Path $repoRoot '.hscli\config.yml'
                  }
                  $candidates = $candidates | Get-Unique

                  foreach ($p in $candidates) {
                    try {
                      if (Test-Path $p) {
                        Remove-Item -Path $p -Force -Recurse -ErrorAction SilentlyContinue
                        Write-Host "Removed pre-existing config (if present): $p"
                      }
                    } catch {
                      Write-Warning ("Could not remove existing config {0}: {1}" -f $p, $_.Exception.Message)
                    }
                  }
                } catch {
                  Write-Warning ("Cleanup step failed: {0}" -f $_.Exception.Message)
                }

                # ---- write single hubspot.config.yml into repo root using ConvertTo-Yaml ----
                $targetPath = Join-Path $repoRoot 'hubspot.config.yml'
                try {
                  $dir = Split-Path -Path $targetPath -Parent
                  if (-not (Test-Path $dir)) { New-Item -ItemType Directory -Path $dir -Force | Out-Null }

                  $yamlText = ConvertTo-Yaml -Data $legacyCfg
                  $yamlText | Out-File -FilePath $targetPath -Encoding utf8 -Force

                  Write-Host "Wrote config to: $targetPath"
                } catch {
                  Write-Error ("Failed to write config to repo root: {0}" -f $_.Exception.Message)
                  exit 1
                }

                # ---- show small masked preview for verification (DO NOT reveal PAT) ----
                try {
                  $raw = Get-Content -Path $targetPath -Raw -ErrorAction Stop
                  $masked = $raw -replace [regex]::Escape($pat), '***REDACTED_PAT***'
                  $preview = ($masked -split "`n" | Select-Object -First 40) -join "`n"
                  Write-Host ("--- Config preview (masked): {0} ---`n{1}`n--- end preview ---" -f $targetPath, $preview)
                } catch {
                  Write-Warning ("Could not produce preview for {0}: {1}" -f $targetPath, $_.Exception.Message)
                }

                # ---- ensure HubSpot CLI installed (best-effort) ----
                try {
                  npm install -g @hubspot/cli 2>&1 | Write-Host
                } catch {
                  Write-Warning ("npm install -g @hubspot/cli failed: {0}" -f $_.Exception.Message)
                }
                try { hs --version 2>&1 | Write-Host } catch { Write-Warning "hs not available" }

                # ---- the theme fetch + git flow (keeps previous behavior) ----
                $themes = @('Code Ninja - Marketing Website','DEV','CN TEAM')

                foreach ($themeName in $themes) {
                  Write-Host "`n=== Processing theme: $themeName ==="

                  # safe folder + branch names (use underscores)
                  $folderSafe = $themeName -replace '[\/:*?"<>|]', '_' -replace '\s+', '_' -replace '_+', '_'
                  $folderSafe = $folderSafe.Trim('_')
                  $branchName = "theme_$($folderSafe.ToLower())"

                  Write-Host ("Branch: {0}" -f $branchName)
                  Write-Host ("Folder-safe name: {0}" -f $folderSafe)

                  # Prepare themes directory in repo
                  $themesDir = Join-Path $repoRoot 'themes'
                  if (-not (Test-Path $themesDir)) { New-Item -ItemType Directory -Path $themesDir -Force | Out-Null }

                  # Try to create original-named folder; fallback to safe one
                  $destOriginal = Join-Path $themesDir $themeName
                  $destSafe = Join-Path $themesDir $folderSafe
                  $dest = $null
                  try {
                    if (-not (Test-Path $destOriginal)) { New-Item -ItemType Directory -Path $destOriginal -Force | Out-Null }
                    $dest = $destOriginal
                  } catch {
                    Write-Warning ("Cannot create original-named folder: {0}. Falling back to safe folder." -f $_.Exception.Message)
                    if (-not (Test-Path $destSafe)) { New-Item -ItemType Directory -Path $destSafe -Force | Out-Null }
                    $dest = $destSafe
                  }

                  Write-Host ("Fetching theme into: {0}" -f $dest)

                  # Run hs fetch with explicit account (capture output) — continue on failures
                 $hsOutput = hs fetch "$themeName" "$dest" --account "$portalId" --overwrite 2>&1
                  Write-Host $hsOutput
                  $exit = $LASTEXITCODE

                  if ($exit -ne 0) {
                    Write-Warning "hs fetch exited with code $exit — continuing despite warning."
                  }

                  # Force success regardless of hs exit code
                  exit 0

                  # warn on common validation/no-config messages
                  if ($hsOutput -and ($hsOutput -match '(?i)validation failed' -or $hsOutput -match '(?i)no config' -or $hsOutput -match '(?i)missing a "personalAccessKey"' -or $hsOutput -match '(?i)unauthorized')) {
                    Write-Warning ("hs fetch output for '{0}': {1}" -f $themeName, ($hsOutput -join "`n"))
                  }

                  # verify files exist
                  $files = Get-ChildItem -Path $dest -Recurse -File -ErrorAction SilentlyContinue
                  if (-not $files -or $files.Count -eq 0) {
                    Write-Warning ("No files found in {0} after hs fetch. Skipping commit for '{1}'." -f $dest, $themeName)
                    continue
                  }

                  # Git commit & push (non-interactive)
                  try {
                    Push-Location $repoRoot

                    # ensure branch exists and is checked out
                    git checkout -B $branchName 2>&1 | Write-Host

                    # set remote url with token (non-interactive push)
                    if ($token -and $token.Trim()) {
                      $authUrl = "https://$token@grahamsio.visualstudio.com/CN%20Website/_git/Hubspot"
                      Write-Host "Setting origin to tokenized URL for non-interactive push..."
                      git remote set-url origin $authUrl 2>&1 | Write-Host
                    } else {
                      Write-Warning "SYSTEM_ACCESSTOKEN not present; push may require manual auth."
                    }

                    # git add the folder we fetched (use the dest leaf)
                    $leaf = Split-Path -Path $dest -Leaf
                    git add ("themes/" + $leaf) 2>&1 | Write-Host

                    if (-not (git diff --cached --quiet)) {
                      git config user.name 'AutomatedBuild'
                      git config user.email 'build@yourdomain.com'
                      git commit -m ("Sync HubSpot theme '{0}' → {1}" -f $themeName, $branchName) 2>&1 | Write-Host
                      & git push origin ("HEAD:" + $branchName) 2>&1 | Write-Host
                    } else {
                      Write-Host ("No changes detected for '{0}'." -f $themeName)
                    }
                  } catch {
                    Write-Warning ("Git operations failed for '{0}': {1}" -f $themeName, $_.Exception.Message)
                  } finally {
                    Pop-Location
                  }
                } # end foreach theme
            env:
              HUBSPOT_PAT: $(HUBSPOT_PAT)
              HUBSPOT_PORTAL_ID: $(HUBSPOT_PORTAL_ID)
              REPO_URL: $(REPO_URL)
              WORKDIR: $(WORKDIR)
